

import java_cup.runtime.*;

import ast.ArrayType;
import ast.AssignmentExpression;
import ast.AssignmentOperator;
import ast.BinaryExpression;
import ast.BinaryOperator;
import ast.ClassBody;
import ast.ClassDeclaration;
import ast.Declaration;
import ast.ElementType;
import ast.Expression;
import ast.ExpressionStatement;
import ast.FieldDeclaration;
import ast.IdentifierExpression;
import ast.IdentifierNode;
import ast.IntegerLiteralExpression;
import ast.LocalVariableDeclarationStatement;
import ast.MethodBody;
import ast.MethodDeclaration;
import ast.MethodInvocationStatement;
import ast.NamedType;
import ast.Node;
import ast.Parameter;
import ast.Result;
import ast.Statement;
import ast.TempWrapper;
import ast.Type;
import ast.VariableInitializer;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\005\000\002\002\004\000\002\114" +
    "\003\000\002\114\002\000\002\116\004\000\002\116\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\005\003\000\002\006\011\000\002\120\003\000\002" +
    "\120\002\000\002\122\003\000\002\122\002\000\002\124" +
    "\003\000\002\124\002\000\002\012\004\000\002\012\002" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\151\002\000\002\007\006\000\002\065" +
    "\003\000\002\010\004\000\002\010\002\000\002\011\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\142\006\000\002\024\005\000\002\026\004\000\002" +
    "\026\002\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\005\000\002\126\003\000" +
    "\002\126\002\000\002\013\003\000\002\032\006\000\002" +
    "\033\003\000\002\033\002\000\002\034\003\000\002\035" +
    "\003\000\002\036\005\000\002\056\003\000\002\061\004" +
    "\000\002\023\004\000\002\057\003\000\002\060\004\000" +
    "\002\130\003\000\002\130\002\000\002\113\003\000\002" +
    "\112\003\000\002\112\003\000\002\140\005\000\002\070" +
    "\003\000\002\141\003\000\002\141\003\000\002\141\003" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\141\003\000\002\141\003\000\002\141\003\000\002" +
    "\141\003\000\002\141\003\000\002\141\003\000\002\111" +
    "\003\000\002\111\007\000\002\110\003\000\002\107\003" +
    "\000\002\106\003\000\002\105\003\000\002\105\005\000" +
    "\002\104\003\000\002\104\005\000\002\103\003\000\002" +
    "\103\005\000\002\103\005\000\002\102\003\000\002\102" +
    "\005\000\002\102\005\000\002\102\005\000\002\102\005" +
    "\000\002\101\003\000\002\101\005\000\002\101\005\000" +
    "\002\101\005\000\002\100\003\000\002\100\005\000\002" +
    "\100\005\000\002\077\003\000\002\077\005\000\002\077" +
    "\005\000\002\077\005\000\002\076\003\000\002\076\003" +
    "\000\002\076\004\000\002\076\004\000\002\076\003\000" +
    "\002\075\003\000\002\075\004\000\002\075\004\000\002" +
    "\075\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\073\003\000\002\073\003" +
    "\000\002\067\003\000\002\067\005\000\002\072\003\000" +
    "\002\071\003\000\002\031\003\000\002\037\005\000\002" +
    "\040\004\000\002\041\004\000\002\041\002\000\002\042" +
    "\003\000\002\042\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\047\007\000" +
    "\002\050\010\000\002\051\004\000\002\044\003\000\002" +
    "\044\003\000\002\045\004\000\002\046\003\000\002\046" +
    "\003\000\002\052\004\000\002\053\005\000\002\015\004" +
    "\000\002\017\005\000\002\017\002\000\002\016\004\000" +
    "\002\020\004\000\002\020\002\000\002\066\004\000\002" +
    "\022\003\000\002\022\002\000\002\021\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\003\000\002\062\003" +
    "\000\002\062\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\143\010\000\002\144" +
    "\003\000\002\144\005\000\002\145\003\000\002\145\002" +
    "\000\002\150\004\000\002\147\005\000\002\147\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\024\002\ufffe\014\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\001\002\000\004" +
    "\002\363\001\002\000\024\002\ufffc\014\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\024\002\uffff\014\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\001\002\000\024\002\ufffa" +
    "\014\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\001\002\000\024\002\001\014\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001" +
    "\002\000\024\002\ufffd\014\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000\022\014" +
    "\026\034\020\035\023\036\021\037\016\040\022\041\024" +
    "\042\017\001\002\000\024\002\ufff9\014\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002" +
    "\000\024\002\ufff8\014\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\001\002\000\024\002\ufffb" +
    "\014\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\001\002\000\022\014\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000" +
    "\022\014\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\001\002\000\022\014\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002" +
    "\000\022\014\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\001\002\000\022\014\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001" +
    "\002\000\022\014\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\001\002\000\022\014\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\001\002\000\022\014\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\004\067\027" +
    "\001\002\000\116\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\075\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\107\uffe5\110\uffe5\111\uffe5\112\uffe5\115\uffe5\116\uffe5\117" +
    "\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5" +
    "\126\uffe5\127\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134" +
    "\uffe5\137\uffe5\140\uffe5\141\uffe5\143\uffe5\145\uffe5\146\uffe5" +
    "\147\uffe5\001\002\000\004\141\ufff5\001\002\000\004\141" +
    "\ufff6\001\002\000\004\141\ufff3\001\002\000\004\141\ufff1" +
    "\001\002\000\004\141\ufff4\001\002\000\004\141\ufff2\001" +
    "\002\000\004\141\037\001\002\000\046\004\uffe3\006\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\021\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\067\uffe3\142\uffe3\145\uffe3\001\002\000\024\002\ufff7\014" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\001\002\000\046\004\uffdb\006\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\021\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\067\uffdb\142" +
    "\uffe7\145\042\001\002\000\046\004\uffdf\006\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\021\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\067\uffdf" +
    "\142\uffdf\145\uffdf\001\002\000\004\142\362\001\002\000" +
    "\046\004\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\021\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\044\uffe2\067\uffe2\142\uffe2\145\uffe2\001\002" +
    "\000\042\004\054\006\057\010\103\011\067\012\053\013" +
    "\075\021\101\034\064\035\060\036\071\037\074\040\052" +
    "\041\073\042\065\044\056\067\027\001\002\000\046\004" +
    "\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\021\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\067\uffe0\142\uffe0\145\uffe0\001\002\000\046" +
    "\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\021" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\044\uffe4\067\uffe4\142\uffe4\145\uffe4\001\002\000" +
    "\046\004\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\021\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\067\uffe1\142\uffe1\145\uffe1\001\002" +
    "\000\042\004\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\021\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\044\uffdc\067\uffdc\001\002\000\042\004" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\021\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\044\uffd4\067\uffd4\001\002\000\004\067\uff5a\001\002" +
    "\000\004\067\uff5e\001\002\000\004\067\uff62\001\002\000" +
    "\004\067\uff5c\001\002\000\004\067\uff5d\001\002\000\042" +
    "\004\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\021" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\067\uffd8\001\002\000\004\067\uffc9\001" +
    "\002\000\004\067\027\001\002\000\004\143\uffc6\001\002" +
    "\000\042\004\uffda\006\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\021\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\044\uffda\067\uffda\001\002\000\042\004" +
    "\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\021\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\044\uffd6\067\uffd6\001\002\000\004\067\uff61\001\002" +
    "\000\004\067\uff58\001\002\000\004\143\uffc3\001\002\000" +
    "\042\004\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\021\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\044\uffd9\067\uffd9\001\002\000\004\067\uff63" +
    "\001\002\000\042\004\uffd5\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\021\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\067\uffd5\001\002\000" +
    "\042\004\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\021\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\044\uffd7\067\uffd7\001\002\000\004\067\uff5b" +
    "\001\002\000\004\143\270\001\002\000\004\067\027\001" +
    "\002\000\004\067\uff60\001\002\000\004\067\uffd0\001\002" +
    "\000\004\141\105\001\002\000\004\067\uff59\001\002\000" +
    "\004\067\uff5f\001\002\000\046\004\uffdb\006\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\023\115\024\112\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\067\027\141\105\001\002\000\046\004\uff82\006\uff82\010" +
    "\uff82\011\uff82\012\uff82\013\uff82\021\uff82\034\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\044\uff82\067" +
    "\uff82\142\uff82\145\uff82\001\002\000\046\004\uffdd\006\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\021\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd" +
    "\067\uffdd\142\uffdd\145\uffdd\001\002\000\004\145\337\001" +
    "\002\000\004\145\uff70\001\002\000\012\023\331\024\112" +
    "\067\027\141\105\001\002\000\004\145\uff71\001\002\000" +
    "\004\147\317\001\002\000\004\137\313\001\002\000\032" +
    "\070\300\122\302\123\304\124\301\125\306\126\275\127" +
    "\307\130\310\131\276\132\305\133\311\134\303\001\002" +
    "\000\050\004\uff7b\006\uff7b\010\uff7b\011\uff7b\012\uff7b\013" +
    "\uff7b\023\uff7b\024\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\044\uff7b\067\uff7b\141\uff7b\142" +
    "\uff7b\001\002\000\050\004\uff73\006\uff73\010\uff73\011\uff73" +
    "\012\uff73\013\uff73\023\uff73\024\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\044\uff73\067\uff73" +
    "\141\uff73\142\uff73\001\002\000\004\145\274\001\002\000" +
    "\110\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\075\uff86" +
    "\076\uff86\100\uff86\101\uff86\102\uff86\103\uff86\107\uff86\110" +
    "\uff86\111\uff86\112\uff86\115\uff86\116\uff86\117\uff86\120\uff86" +
    "\121\uff86\122\uff86\123\uff86\124\uff86\125\uff86\126\uff86\127" +
    "\uff86\130\uff86\131\uff86\132\uff86\133\uff86\134\uff86\140\uff86" +
    "\145\uff86\146\uff86\147\uff56\001\002\000\004\142\273\001" +
    "\002\000\050\004\uff74\006\uff74\010\uff74\011\uff74\012\uff74" +
    "\013\uff74\023\uff74\024\uff74\034\uff74\035\uff74\036\uff74\037" +
    "\uff74\040\uff74\041\uff74\042\uff74\044\uff74\067\uff74\141\uff74" +
    "\142\uff74\001\002\000\040\004\054\006\057\010\103\011" +
    "\067\012\053\013\075\034\064\035\060\036\071\037\074" +
    "\040\052\041\073\042\065\044\056\067\027\001\002\000" +
    "\050\004\uff7c\006\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\023\uff7c\024\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\044\uff7c\067\uff7c\141\uff7c\142\uff7c" +
    "\001\002\000\050\004\uff7d\006\uff7d\010\uff7d\011\uff7d\012" +
    "\uff7d\013\uff7d\023\uff7d\024\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\044\uff7d\067\uff7d\141" +
    "\uff7d\142\uff7d\001\002\000\050\004\uff79\006\uff79\010\uff79" +
    "\011\uff79\012\uff79\013\uff79\023\uff79\024\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\044\uff79" +
    "\067\uff79\141\uff79\142\uff79\001\002\000\050\004\uff78\006" +
    "\uff78\010\uff78\011\uff78\012\uff78\013\uff78\023\uff78\024\uff78" +
    "\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\044\uff78\067\uff78\141\uff78\142\uff78\001\002\000\050" +
    "\004\uff7a\006\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\023" +
    "\uff7a\024\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\044\uff7a\067\uff7a\141\uff7a\142\uff7a\001" +
    "\002\000\050\004\uff7e\006\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\023\uff7e\024\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\044\uff7e\067\uff7e\141\uff7e" +
    "\142\uff7e\001\002\000\032\070\uffbe\122\uffbe\123\uffbe\124" +
    "\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe" +
    "\133\uffbe\134\uffbe\001\002\000\050\004\uffdb\006\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\023\115\024\112\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044" +
    "\uffdb\067\027\141\105\142\uff80\001\002\000\050\004\uff7f" +
    "\006\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\023\uff7f\024" +
    "\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\044\uff7f\067\uff7f\141\uff7f\142\uff7f\001\002\000" +
    "\004\067\027\001\002\000\004\145\uff6e\001\002\000\016" +
    "\067\uff65\070\uff65\140\uff65\143\270\145\uff65\146\uff65\001" +
    "\002\000\006\145\uff6b\146\263\001\002\000\012\067\uff68" +
    "\070\145\145\uff68\146\uff68\001\002\000\010\067\uff6a\145" +
    "\uff6a\146\uff6a\001\002\000\016\067\027\073\200\074\204" +
    "\107\201\110\171\135\207\001\002\000\020\067\uffad\075" +
    "\uffad\076\uffad\115\261\140\uffad\145\uffad\146\uffad\001\002" +
    "\000\016\067\uffaf\075\uffaf\076\uffaf\140\uffaf\145\uffaf\146" +
    "\uffaf\001\002\000\056\067\uff89\071\uff89\072\uff89\073\uff89" +
    "\075\uff89\076\uff89\100\uff89\101\uff89\102\uff89\103\uff89\107" +
    "\uff89\110\uff89\111\uff89\112\uff89\115\uff89\116\uff89\117\uff89" +
    "\120\uff89\121\uff89\140\uff89\145\uff89\146\uff89\001\002\000" +
    "\056\067\uff84\071\uff84\072\uff84\073\uff84\075\uff84\076\uff84" +
    "\100\uff84\101\uff84\102\uff84\103\uff84\107\uff84\110\uff84\111" +
    "\uff84\112\uff84\115\uff84\116\uff84\117\uff84\120\uff84\121\uff84" +
    "\140\uff84\145\uff84\146\uff84\001\002\000\106\067\uff8b\070" +
    "\uffbe\071\uff8b\072\uff8b\073\uff8b\075\uff8b\076\uff8b\100\uff8b" +
    "\101\uff8b\102\uff8b\103\uff8b\107\uff8b\110\uff8b\111\uff8b\112" +
    "\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uffbe" +
    "\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131" +
    "\uffbe\132\uffbe\133\uffbe\134\uffbe\140\uff8b\145\uff8b\146\uff8b" +
    "\001\002\000\056\067\uff87\071\uff87\072\uff87\073\uff87\075" +
    "\uff87\076\uff87\100\uff87\101\uff87\102\uff87\103\uff87\107\uff87" +
    "\110\uff87\111\uff87\112\uff87\115\uff87\116\uff87\117\uff87\120" +
    "\uff87\121\uff87\140\uff87\145\uff87\146\uff87\001\002\000\004" +
    "\147\257\001\002\000\056\067\uff8d\071\uff8d\072\uff8d\073" +
    "\uff8d\075\uff8d\076\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\112\uff8d\115\uff8d\116\uff8d\117" +
    "\uff8d\120\uff8d\121\uff8d\140\uff8d\145\uff8d\146\uff8d\001\002" +
    "\000\056\067\uff99\071\uff99\072\uff99\073\uff99\075\uff99\076" +
    "\uff99\100\uff99\101\uff99\102\uff99\103\uff99\107\uff99\110\uff99" +
    "\111\uff99\112\uff99\115\uff99\116\uff99\117\uff99\120\uff99\121" +
    "\uff99\140\uff99\145\uff99\146\uff99\001\002\000\050\067\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\075\uffa0\076\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\103\uffa0\107\222\110\223\115\uffa0\117\uffa0" +
    "\120\uffa0\121\uffa0\140\uffa0\145\uffa0\146\uffa0\001\002\000" +
    "\056\067\uff8c\071\uff8c\072\uff8c\073\uff8c\075\uff8c\076\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\107\uff8c\110\uff8c\111" +
    "\uff8c\112\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c" +
    "\140\uff8c\145\uff8c\146\uff8c\001\002\000\022\067\uffac\075" +
    "\uffac\076\uffac\103\255\115\uffac\140\uffac\145\uffac\146\uffac" +
    "\001\002\000\016\067\uffae\075\uffae\076\uffae\140\uffae\145" +
    "\uffae\146\uffae\001\002\000\056\067\uff95\071\uff95\072\uff95" +
    "\073\uff95\075\uff95\076\uff95\100\uff95\101\uff95\102\uff95\103" +
    "\uff95\107\uff95\110\uff95\111\uff95\112\uff95\115\uff95\116\uff95" +
    "\117\uff95\120\uff95\121\uff95\140\uff95\145\uff95\146\uff95\001" +
    "\002\000\056\067\uff9c\071\uff9c\072\uff9c\073\uff9c\075\uff9c" +
    "\076\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\107\uff9c\110" +
    "\uff9c\111\227\112\226\115\uff9c\116\225\117\uff9c\120\uff9c" +
    "\121\uff9c\140\uff9c\145\uff9c\146\uff9c\001\002\000\056\067" +
    "\uff94\071\uff94\072\uff94\073\uff94\075\uff94\076\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\107\uff94\110\uff94\111\uff94\112" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\140\uff94" +
    "\145\uff94\146\uff94\001\002\000\014\067\uffc2\076\uffc2\140" +
    "\uffc2\145\uffc2\146\uffc2\001\002\000\014\067\uffc1\076\uffc1" +
    "\140\uffc1\145\uffc1\146\uffc1\001\002\000\026\067\uffaa\073" +
    "\251\075\uffaa\076\uffaa\100\252\103\uffaa\115\uffaa\140\uffaa" +
    "\145\uffaa\146\uffaa\001\002\000\016\067\027\073\200\074" +
    "\204\107\201\110\171\135\207\001\002\000\044\067\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\075\uffa5\076\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\115\uffa5\117\216\120\217\121\220" +
    "\140\uffa5\145\uffa5\146\uffa5\001\002\000\056\067\uff88\071" +
    "\uff88\072\uff88\073\uff88\075\uff88\076\uff88\100\uff88\101\uff88" +
    "\102\uff88\103\uff88\107\uff88\110\uff88\111\uff88\112\uff88\115" +
    "\uff88\116\uff88\117\uff88\120\uff88\121\uff88\140\uff88\145\uff88" +
    "\146\uff88\001\002\000\014\067\uffc0\076\uffc0\140\uffc0\145" +
    "\uffc0\146\uffc0\001\002\000\056\067\uff91\071\uff91\072\uff91" +
    "\073\uff91\075\uff91\076\uff91\100\uff91\101\uff91\102\uff91\103" +
    "\uff91\107\uff91\110\uff91\111\uff91\112\uff91\115\uff91\116\uff91" +
    "\117\uff91\120\uff91\121\uff91\140\uff91\145\uff91\146\uff91\001" +
    "\002\000\010\067\uff64\145\uff64\146\uff64\001\002\000\016" +
    "\067\uffb1\075\244\076\uffb1\140\uffb1\145\uffb1\146\uffb1\001" +
    "\002\000\016\067\027\073\200\074\204\107\201\110\171" +
    "\135\207\001\002\000\016\067\027\073\200\074\204\107" +
    "\201\110\171\135\207\001\002\000\056\067\uff8a\071\uff8a" +
    "\072\uff8a\073\uff8a\075\uff8a\076\uff8a\100\uff8a\101\uff8a\102" +
    "\uff8a\103\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a\115\uff8a" +
    "\116\uff8a\117\uff8a\120\uff8a\121\uff8a\140\uff8a\145\uff8a\146" +
    "\uff8a\001\002\000\010\067\uff69\145\uff69\146\uff69\001\002" +
    "\000\016\067\027\073\200\074\204\107\201\110\171\135" +
    "\207\001\002\000\036\067\uffa8\071\213\072\212\073\uffa8" +
    "\075\uffa8\076\uffa8\100\uffa8\101\211\102\210\103\uffa8\115" +
    "\uffa8\140\uffa8\145\uffa8\146\uffa8\001\002\000\056\067\uff90" +
    "\071\uff90\072\uff90\073\uff90\075\uff90\076\uff90\100\uff90\101" +
    "\uff90\102\uff90\103\uff90\107\uff90\110\uff90\111\uff90\112\uff90" +
    "\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\140\uff90\145" +
    "\uff90\146\uff90\001\002\000\056\067\uff83\071\uff83\072\uff83" +
    "\073\uff83\075\uff83\076\uff83\100\uff83\101\uff83\102\uff83\103" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\115\uff83\116\uff83" +
    "\117\uff83\120\uff83\121\uff83\140\uff83\145\uff83\146\uff83\001" +
    "\002\000\016\067\027\073\200\074\204\107\201\110\171" +
    "\135\207\001\002\000\016\067\027\073\200\074\204\107" +
    "\201\110\171\135\207\001\002\000\016\067\027\073\200" +
    "\074\204\107\201\110\171\135\207\001\002\000\016\067" +
    "\027\073\200\074\204\107\201\110\171\135\207\001\002" +
    "\000\044\067\uffa3\071\uffa3\072\uffa3\073\uffa3\075\uffa3\076" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\115\uffa3\117\216" +
    "\120\217\121\220\140\uffa3\145\uffa3\146\uffa3\001\002\000" +
    "\056\067\uff8b\071\uff8b\072\uff8b\073\uff8b\075\uff8b\076\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\107\uff8b\110\uff8b\111" +
    "\uff8b\112\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b" +
    "\140\uff8b\145\uff8b\146\uff8b\001\002\000\016\067\027\073" +
    "\200\074\204\107\201\110\171\135\207\001\002\000\016" +
    "\067\027\073\200\074\204\107\201\110\171\135\207\001" +
    "\002\000\016\067\027\073\200\074\204\107\201\110\171" +
    "\135\207\001\002\000\050\067\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\107\222\110\223\115\uff9d\117\uff9d\120\uff9d\121\uff9d\140" +
    "\uff9d\145\uff9d\146\uff9d\001\002\000\016\067\027\073\200" +
    "\074\204\107\201\110\171\135\207\001\002\000\016\067" +
    "\027\073\200\074\204\107\201\110\171\135\207\001\002" +
    "\000\056\067\uff9a\071\uff9a\072\uff9a\073\uff9a\075\uff9a\076" +
    "\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\107\uff9a\110\uff9a" +
    "\111\227\112\226\115\uff9a\116\225\117\uff9a\120\uff9a\121" +
    "\uff9a\140\uff9a\145\uff9a\146\uff9a\001\002\000\016\067\027" +
    "\073\200\074\204\107\201\110\171\135\207\001\002\000" +
    "\016\067\027\073\200\074\204\107\201\110\171\135\207" +
    "\001\002\000\016\067\027\073\200\074\204\107\201\110" +
    "\171\135\207\001\002\000\056\067\uff98\071\uff98\072\uff98" +
    "\073\uff98\075\uff98\076\uff98\100\uff98\101\uff98\102\uff98\103" +
    "\uff98\107\uff98\110\uff98\111\uff98\112\uff98\115\uff98\116\uff98" +
    "\117\uff98\120\uff98\121\uff98\140\uff98\145\uff98\146\uff98\001" +
    "\002\000\056\067\uff97\071\uff97\072\uff97\073\uff97\075\uff97" +
    "\076\uff97\100\uff97\101\uff97\102\uff97\103\uff97\107\uff97\110" +
    "\uff97\111\uff97\112\uff97\115\uff97\116\uff97\117\uff97\120\uff97" +
    "\121\uff97\140\uff97\145\uff97\146\uff97\001\002\000\056\067" +
    "\uff96\071\uff96\072\uff96\073\uff96\075\uff96\076\uff96\100\uff96" +
    "\101\uff96\102\uff96\103\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\115\uff96\116\uff96\117\uff96\120\uff96\121\uff96\140\uff96" +
    "\145\uff96\146\uff96\001\002\000\056\067\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\075\uff9b\076\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\103\uff9b\107\uff9b\110\uff9b\111\227\112\226\115\uff9b\116" +
    "\225\117\uff9b\120\uff9b\121\uff9b\140\uff9b\145\uff9b\146\uff9b" +
    "\001\002\000\050\067\uff9e\071\uff9e\072\uff9e\073\uff9e\075" +
    "\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\107\222" +
    "\110\223\115\uff9e\117\uff9e\120\uff9e\121\uff9e\140\uff9e\145" +
    "\uff9e\146\uff9e\001\002\000\050\067\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\075\uff9f\076\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\107\222\110\223\115\uff9f\117\uff9f\120\uff9f\121\uff9f" +
    "\140\uff9f\145\uff9f\146\uff9f\001\002\000\044\067\uffa4\071" +
    "\uffa4\072\uffa4\073\uffa4\075\uffa4\076\uffa4\100\uffa4\101\uffa4" +
    "\102\uffa4\103\uffa4\115\uffa4\117\216\120\217\121\220\140" +
    "\uffa4\145\uffa4\146\uffa4\001\002\000\044\067\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\075\uffa2\076\uffa2\100\uffa2\101\uffa2\102" +
    "\uffa2\103\uffa2\115\uffa2\117\216\120\217\121\220\140\uffa2" +
    "\145\uffa2\146\uffa2\001\002\000\044\067\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\115\uffa1\117\216\120\217\121\220\140\uffa1\145" +
    "\uffa1\146\uffa1\001\002\000\056\067\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\075\uff8f\076\uff8f\100\uff8f\101\uff8f\102\uff8f\103" +
    "\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\115\uff8f\116\uff8f" +
    "\117\uff8f\120\uff8f\121\uff8f\140\uff8f\145\uff8f\146\uff8f\001" +
    "\002\000\056\067\uff93\071\uff93\072\uff93\073\uff93\075\uff93" +
    "\076\uff93\100\uff93\101\uff93\102\uff93\103\uff93\107\uff93\110" +
    "\uff93\111\uff93\112\uff93\115\uff93\116\uff93\117\uff93\120\uff93" +
    "\121\uff93\140\uff93\145\uff93\146\uff93\001\002\000\056\067" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\075\uff8e\076\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\107\uff8e\110\uff8e\111\uff8e\112" +
    "\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\121\uff8e\140\uff8e" +
    "\145\uff8e\146\uff8e\001\002\000\016\067\027\073\200\074" +
    "\204\107\201\110\171\135\207\001\002\000\004\076\246" +
    "\001\002\000\016\067\027\073\200\074\204\107\201\110" +
    "\171\135\207\001\002\000\014\067\uffb0\076\uffb0\140\uffb0" +
    "\145\uffb0\146\uffb0\001\002\000\056\067\uff92\071\uff92\072" +
    "\uff92\073\uff92\075\uff92\076\uff92\100\uff92\101\uff92\102\uff92" +
    "\103\uff92\107\uff92\110\uff92\111\uff92\112\uff92\115\uff92\116" +
    "\uff92\117\uff92\120\uff92\121\uff92\140\uff92\145\uff92\146\uff92" +
    "\001\002\000\016\067\027\073\200\074\204\107\201\110" +
    "\171\135\207\001\002\000\016\067\027\073\200\074\204" +
    "\107\201\110\171\135\207\001\002\000\036\067\uffa7\071" +
    "\213\072\212\073\uffa7\075\uffa7\076\uffa7\100\uffa7\101\211" +
    "\102\210\103\uffa7\115\uffa7\140\uffa7\145\uffa7\146\uffa7\001" +
    "\002\000\036\067\uffa6\071\213\072\212\073\uffa6\075\uffa6" +
    "\076\uffa6\100\uffa6\101\211\102\210\103\uffa6\115\uffa6\140" +
    "\uffa6\145\uffa6\146\uffa6\001\002\000\016\067\027\073\200" +
    "\074\204\107\201\110\171\135\207\001\002\000\026\067" +
    "\uffa9\073\251\075\uffa9\076\uffa9\100\252\103\uffa9\115\uffa9" +
    "\140\uffa9\145\uffa9\146\uffa9\001\002\000\004\067\027\001" +
    "\002\000\110\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\075\uff85\076\uff85\100\uff85\101\uff85\102\uff85\103\uff85\107" +
    "\uff85\110\uff85\111\uff85\112\uff85\115\uff85\116\uff85\117\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\126" +
    "\uff85\127\uff85\130\uff85\131\uff85\132\uff85\133\uff85\134\uff85" +
    "\140\uff85\145\uff85\146\uff85\147\uff55\001\002\000\016\067" +
    "\027\073\200\074\204\107\201\110\171\135\207\001\002" +
    "\000\022\067\uffab\075\uffab\076\uffab\103\255\115\uffab\140" +
    "\uffab\145\uffab\146\uffab\001\002\000\006\067\uff6b\146\263" +
    "\001\002\000\004\145\uff6d\001\002\000\004\067\027\001" +
    "\002\000\006\067\uff6c\145\uff6c\001\002\000\014\067\uff67" +
    "\070\uff67\140\uff67\145\uff67\146\uff67\001\002\000\004\144" +
    "\272\001\002\000\014\067\uff66\070\uff66\140\uff66\145\uff66" +
    "\146\uff66\001\002\000\014\067\uffc7\070\uffc7\140\uffc7\145" +
    "\uffc7\146\uffc7\001\002\000\054\004\uff81\006\uff81\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\021\uff81\023\uff81\024\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\044\uff81\067\uff81\141\uff81\142\uff81\145\uff81\001\002\000" +
    "\050\004\uff72\006\uff72\010\uff72\011\uff72\012\uff72\013\uff72" +
    "\023\uff72\024\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\044\uff72\067\uff72\141\uff72\142\uff72" +
    "\001\002\000\016\067\uffb4\073\uffb4\074\uffb4\107\uffb4\110" +
    "\uffb4\135\uffb4\001\002\000\016\067\uffba\073\uffba\074\uffba" +
    "\107\uffba\110\uffba\135\uffba\001\002\000\016\067\027\073" +
    "\200\074\204\107\201\110\171\135\207\001\002\000\016" +
    "\067\uffbd\073\uffbd\074\uffbd\107\uffbd\110\uffbd\135\uffbd\001" +
    "\002\000\016\067\uffbc\073\uffbc\074\uffbc\107\uffbc\110\uffbc" +
    "\135\uffbc\001\002\000\016\067\uffb9\073\uffb9\074\uffb9\107" +
    "\uffb9\110\uffb9\135\uffb9\001\002\000\016\067\uffb5\073\uffb5" +
    "\074\uffb5\107\uffb5\110\uffb5\135\uffb5\001\002\000\016\067" +
    "\uffb8\073\uffb8\074\uffb8\107\uffb8\110\uffb8\135\uffb8\001\002" +
    "\000\016\067\uffb7\073\uffb7\074\uffb7\107\uffb7\110\uffb7\135" +
    "\uffb7\001\002\000\016\067\uffbb\073\uffbb\074\uffbb\107\uffbb" +
    "\110\uffbb\135\uffbb\001\002\000\016\067\uffb2\073\uffb2\074" +
    "\uffb2\107\uffb2\110\uffb2\135\uffb2\001\002\000\016\067\uffb3" +
    "\073\uffb3\074\uffb3\107\uffb3\110\uffb3\135\uffb3\001\002\000" +
    "\016\067\uffb6\073\uffb6\074\uffb6\107\uffb6\110\uffb6\135\uffb6" +
    "\001\002\000\014\067\uffbf\076\uffbf\140\uffbf\145\uffbf\146" +
    "\uffbf\001\002\000\016\067\027\073\200\074\204\107\201" +
    "\110\171\135\207\001\002\000\004\140\315\001\002\000" +
    "\012\023\115\024\112\067\027\141\105\001\002\000\050" +
    "\004\uff77\006\uff77\010\uff77\011\uff77\012\uff77\013\uff77\023" +
    "\uff77\024\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\044\uff77\067\uff77\141\uff77\142\uff77\001" +
    "\002\000\004\067\027\001\002\000\036\070\uff85\122\uff85" +
    "\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131" +
    "\uff85\132\uff85\133\uff85\134\uff85\137\321\147\uff55\001\002" +
    "\000\020\067\027\073\200\074\204\107\201\110\171\135" +
    "\207\140\uff53\001\002\000\004\140\uff54\001\002\000\004" +
    "\140\330\001\002\000\006\140\uff50\146\uff50\001\002\000" +
    "\006\140\uff52\146\326\001\002\000\016\067\027\073\200" +
    "\074\204\107\201\110\171\135\207\001\002\000\006\140" +
    "\uff51\146\uff51\001\002\000\004\145\uff57\001\002\000\004" +
    "\137\333\001\002\000\050\004\uff75\006\uff75\010\uff75\011" +
    "\uff75\012\uff75\013\uff75\023\uff75\024\uff75\034\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\044\uff75\067" +
    "\uff75\141\uff75\142\uff75\001\002\000\016\067\027\073\200" +
    "\074\204\107\201\110\171\135\207\001\002\000\004\140" +
    "\335\001\002\000\012\023\115\024\112\067\027\141\105" +
    "\001\002\000\050\004\uff77\006\uff77\010\uff77\011\uff77\012" +
    "\uff77\013\uff77\023\uff77\024\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\042\uff77\044\uff77\067\uff77\141" +
    "\uff77\142\uff77\001\002\000\050\004\uff6f\006\uff6f\010\uff6f" +
    "\011\uff6f\012\uff6f\013\uff6f\023\uff6f\024\uff6f\034\uff6f\035" +
    "\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\044\uff6f" +
    "\067\uff6f\141\uff6f\142\uff6f\001\002\000\004\145\341\001" +
    "\002\000\046\004\uffde\006\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\021\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\044\uffde\067\uffde\142\uffde\145\uffde" +
    "\001\002\000\004\067\uffc8\001\002\000\004\143\uffc4\001" +
    "\002\000\004\143\uffc5\001\002\000\004\137\351\001\002" +
    "\000\004\141\uffd1\001\002\000\004\141\uffd2\001\002\000" +
    "\004\141\uffd3\001\002\000\042\004\uffdb\006\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\067\uffdb\140\uffcd" +
    "\001\002\000\004\140\uffce\001\002\000\004\140\uffcb\001" +
    "\002\000\004\140\uffcc\001\002\000\040\004\054\006\057" +
    "\010\103\011\067\012\053\013\075\034\064\035\060\036" +
    "\071\037\074\040\052\041\073\042\065\044\056\067\027" +
    "\001\002\000\004\140\357\001\002\000\004\141\uffcf\001" +
    "\002\000\004\067\027\001\002\000\004\140\uffca\001\002" +
    "\000\024\002\uffe6\014\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\010\002\003\114\004\115\005\001\001\000" +
    "\002\001\001\000\004\116\006\001\001\000\002\001\001" +
    "\000\006\003\007\117\010\001\001\000\012\004\014\005" +
    "\012\006\013\012\011\001\001\000\002\001\001\000\004" +
    "\014\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\027" +
    "\001\001\000\002\001\001\000\006\120\031\121\030\001" +
    "\001\000\002\001\001\000\006\122\032\123\033\001\001" +
    "\000\006\124\035\125\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\037\001\001\000\004\010\040" +
    "\001\001\000\002\001\001\000\016\011\046\024\045\025" +
    "\043\026\044\142\047\151\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\061\027" +
    "\050\030\101\054\076\055\071\056\054\057\075\060\062" +
    "\061\060\062\065\063\077\064\103\065\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\345\065" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\130" +
    "\343\131\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\341\001\001\000\012\015\337\016\141\065\140" +
    "\066\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\106\037\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\026\124\037\123\040\122\042\132\043" +
    "\125\044\116\045\117\046\120\047\131\050\127\051\130" +
    "\052\126\053\107\065\121\067\133\070\115\140\112\143" +
    "\110\144\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\037\123\043" +
    "\331\044\116\045\117\046\120\047\131\050\127\051\130" +
    "\065\121\067\133\070\115\140\112\143\110\144\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\141\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\027\050\054\136\055\071\056" +
    "\054\057\075\060\062\061\060\062\065\063\077\064\103" +
    "\065\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\134\001\001\000\002\001\001\000\046\026\124\037" +
    "\123\042\135\043\125\044\116\045\117\046\120\047\131" +
    "\050\127\051\130\052\126\053\107\065\121\067\133\070" +
    "\115\140\112\143\110\144\113\001\001\000\002\001\001" +
    "\000\012\015\137\016\141\065\140\066\142\001\001\000" +
    "\002\001\001\000\006\022\266\023\270\001\001\000\004" +
    "\017\263\001\001\000\004\020\143\001\001\000\002\001" +
    "\001\000\100\021\202\065\121\067\151\070\115\071\150" +
    "\072\172\073\157\074\205\075\174\076\155\077\163\100" +
    "\156\101\171\102\204\103\167\104\160\105\145\106\161" +
    "\107\146\110\176\111\166\112\165\113\175\132\162\133" +
    "\164\134\201\135\147\136\152\137\154\140\173\144\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\065\121\067\214\071\150\072\172\073\157\074" +
    "\205\075\174\076\247\132\162\133\164\134\201\135\147" +
    "\136\152\137\154\144\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\065\121\067\214\071" +
    "\150\072\172\073\157\074\205\075\174\076\242\132\162" +
    "\133\164\134\201\135\147\136\152\137\154\144\153\001" +
    "\001\000\040\065\121\067\214\071\150\072\172\073\157" +
    "\074\205\075\174\076\241\132\162\133\164\134\201\135" +
    "\147\136\152\137\154\144\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\065\121\067\214\071\150\072" +
    "\172\073\157\074\205\075\174\076\240\132\162\133\164" +
    "\134\201\135\147\136\152\137\154\144\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\065\121\067\214\071\150\072\172\073\157\074\205\075" +
    "\174\076\155\077\163\100\156\101\237\132\162\133\164" +
    "\134\201\135\147\136\152\137\154\144\153\001\001\000" +
    "\046\065\121\067\214\071\150\072\172\073\157\074\205" +
    "\075\174\076\155\077\163\100\156\101\236\132\162\133" +
    "\164\134\201\135\147\136\152\137\154\144\153\001\001" +
    "\000\046\065\121\067\214\071\150\072\172\073\157\074" +
    "\205\075\174\076\155\077\163\100\156\101\235\132\162" +
    "\133\164\134\201\135\147\136\152\137\154\144\153\001" +
    "\001\000\046\065\121\067\214\071\150\072\172\073\157" +
    "\074\205\075\174\076\155\077\163\100\156\101\213\132" +
    "\162\133\164\134\201\135\147\136\152\137\154\144\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\065" +
    "\121\067\214\071\150\072\172\073\157\074\205\075\174" +
    "\076\155\077\163\100\234\132\162\133\164\134\201\135" +
    "\147\136\152\137\154\144\153\001\001\000\044\065\121" +
    "\067\214\071\150\072\172\073\157\074\205\075\174\076" +
    "\155\077\163\100\233\132\162\133\164\134\201\135\147" +
    "\136\152\137\154\144\153\001\001\000\044\065\121\067" +
    "\214\071\150\072\172\073\157\074\205\075\174\076\155" +
    "\077\163\100\220\132\162\133\164\134\201\135\147\136" +
    "\152\137\154\144\153\001\001\000\002\001\001\000\042" +
    "\065\121\067\214\071\150\072\172\073\157\074\205\075" +
    "\174\076\155\077\232\132\162\133\164\134\201\135\147" +
    "\136\152\137\154\144\153\001\001\000\042\065\121\067" +
    "\214\071\150\072\172\073\157\074\205\075\174\076\155" +
    "\077\223\132\162\133\164\134\201\135\147\136\152\137" +
    "\154\144\153\001\001\000\002\001\001\000\040\065\121" +
    "\067\214\071\150\072\172\073\157\074\205\075\174\076" +
    "\231\132\162\133\164\134\201\135\147\136\152\137\154" +
    "\144\153\001\001\000\040\065\121\067\214\071\150\072" +
    "\172\073\157\074\205\075\174\076\230\132\162\133\164" +
    "\134\201\135\147\136\152\137\154\144\153\001\001\000" +
    "\040\065\121\067\214\071\150\072\172\073\157\074\205" +
    "\075\174\076\227\132\162\133\164\134\201\135\147\136" +
    "\152\137\154\144\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\065\121\067\151\070\115\071\150" +
    "\072\172\073\157\074\205\075\174\076\155\077\163\100" +
    "\156\101\171\102\204\103\167\104\160\105\145\106\161" +
    "\107\146\110\176\111\166\112\165\113\244\132\162\133" +
    "\164\134\201\135\147\136\152\137\154\140\173\144\153" +
    "\001\001\000\002\001\001\000\066\065\121\067\214\071" +
    "\150\072\172\073\157\074\205\075\174\076\155\077\163" +
    "\100\156\101\171\102\204\103\167\104\160\105\145\106" +
    "\161\107\146\110\176\111\246\132\162\133\164\134\201" +
    "\135\147\136\152\137\154\144\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\065\121\067\214\071\150" +
    "\072\172\073\157\074\205\075\174\076\155\077\163\100" +
    "\156\101\171\102\253\132\162\133\164\134\201\135\147" +
    "\136\152\137\154\144\153\001\001\000\050\065\121\067" +
    "\214\071\150\072\172\073\157\074\205\075\174\076\155" +
    "\077\163\100\156\101\171\102\252\132\162\133\164\134" +
    "\201\135\147\136\152\137\154\144\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\065\121\067\214\071" +
    "\150\072\172\073\157\074\205\075\174\076\155\077\163" +
    "\100\156\101\171\102\204\103\255\132\162\133\164\134" +
    "\201\135\147\136\152\137\154\144\153\001\001\000\002" +
    "\001\001\000\004\065\257\001\001\000\002\001\001\000" +
    "\054\065\121\067\214\071\150\072\172\073\157\074\205" +
    "\075\174\076\155\077\163\100\156\101\171\102\204\103" +
    "\167\104\261\132\162\133\164\134\201\135\147\136\152" +
    "\137\154\144\153\001\001\000\002\001\001\000\004\017" +
    "\264\001\001\000\002\001\001\000\010\016\265\065\140" +
    "\066\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\065\121\067\151\070\115\071\150\072\172" +
    "\073\157\074\205\075\174\076\155\077\163\100\156\101" +
    "\171\102\204\103\167\104\160\105\145\106\161\107\146" +
    "\110\176\111\166\112\165\113\311\132\162\133\164\134" +
    "\201\135\147\136\152\137\154\140\173\144\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\065\121\067\151\070\115" +
    "\071\150\072\172\073\157\074\205\075\174\076\155\077" +
    "\163\100\156\101\171\102\204\103\167\104\160\105\145" +
    "\106\161\107\146\110\176\111\166\112\165\113\313\132" +
    "\162\133\164\134\201\135\147\136\152\137\154\140\173" +
    "\144\153\001\001\000\002\001\001\000\036\037\123\043" +
    "\315\044\116\045\117\046\120\047\131\050\127\051\130" +
    "\065\121\067\133\070\115\140\112\143\110\144\113\001" +
    "\001\000\002\001\001\000\004\065\317\001\001\000\002" +
    "\001\001\000\102\065\121\067\151\070\115\071\150\072" +
    "\172\073\157\074\205\075\174\076\155\077\163\100\156" +
    "\101\171\102\204\103\167\104\160\105\145\106\161\107" +
    "\146\110\176\111\166\112\165\113\323\132\162\133\164" +
    "\134\201\135\147\136\152\137\154\140\173\144\153\145" +
    "\322\150\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\147\324\001\001\000\002\001\001\000\076\065" +
    "\121\067\151\070\115\071\150\072\172\073\157\074\205" +
    "\075\174\076\155\077\163\100\156\101\171\102\204\103" +
    "\167\104\160\105\145\106\161\107\146\110\176\111\166" +
    "\112\165\113\326\132\162\133\164\134\201\135\147\136" +
    "\152\137\154\140\173\144\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\065\121\067\151\070\115\071\150\072\172\073\157" +
    "\074\205\075\174\076\155\077\163\100\156\101\171\102" +
    "\204\103\167\104\160\105\145\106\161\107\146\110\176" +
    "\111\166\112\165\113\333\132\162\133\164\134\201\135" +
    "\147\136\152\137\154\140\173\144\153\001\001\000\002" +
    "\001\001\000\036\037\123\043\335\044\116\045\117\046" +
    "\120\047\131\050\127\051\130\065\121\067\133\070\115" +
    "\140\112\143\110\144\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\126\347\127\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\026\354\033\355\034\351\035" +
    "\353\036\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\027\050\054\357\055\071\056" +
    "\054\057\075\060\062\061\060\062\065\063\077\064\103" +
    "\065\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\065\140\066\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Node root;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CompilationUnit ::= PackageDelcaration_opt ImportDeclaration_opt TypeDeclaration_opt 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PackageDelcaration_opt ::= PackageDelcaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PackageDelcaration_opt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PackageDelcaration_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PackageDelcaration_opt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportDeclaration_opt ::= ImportDeclaration_opt ImportDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDeclaration_opt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ImportDeclaration_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDeclaration_opt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TypeDeclaration_opt ::= TypeDeclaration_opt TypeDeclaration 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration_opt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TypeDeclaration_opt ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration_opt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeDeclaration ::= ClassDeclaration 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassDeclaration ::= NormalClassDeclaration 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NormalClassDeclaration ::= ClassModifier_opt CLASS Identifier TypeParameters_opt Superclass_opt Superinterfaces_opt ClassBody 
            {
              Node RESULT =null;
		int cmdOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cmdOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<String> cmdOpt = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = new ClassDeclaration(i, cmdOpt, cb);
								parser.root = (Node)RESULT;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TypeParameters_opt ::= TypeParameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeParameters_opt",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeParameters_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeParameters_opt",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Superclass_opt ::= Superclass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Superclass_opt",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Superclass_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Superclass_opt",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Superinterfaces_opt ::= Superinterfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Superinterfaces_opt",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Superinterfaces_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Superinterfaces_opt",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassModifier_opt ::= ClassModifier_opt ClassModifier 
            {
              List<String> RESULT =null;
		int cmdOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> cmdOpt = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                if (cmdOpt == null) {
                                    cmdOpt = new ArrayList<>();
                                }
                                RESULT = cmdOpt;
                                RESULT.add (cm); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier_opt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassModifier_opt ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier_opt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassModifier ::= PUBLIC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassModifier ::= PROTECTED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassModifier ::= PRIVATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassModifier ::= ABSTRACT 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassModifier ::= STATIC 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassModifier ::= FINAL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassModifier ::= STRICTFP 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              ClassBody RESULT =null;
		int cbOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Declaration> cbOpt = (List<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                                 RESULT = new ClassBody(cbOpt); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassBody ::= LBRACE ClassBodyDeclaration_opt NT$0 RBRACE 
            {
              ClassBody RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ClassBody) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Declaration> cbOpt = (List<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Identifier ::= IDENTIFIER 
            {
              IdentifierNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierNode(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassBodyDeclaration_opt ::= ClassBodyDeclaration_opt ClassBodyDeclaration 
            {
              List<Declaration> RESULT =null;
		int cbd_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbd_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Declaration> cbd_opt = (List<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration cb = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            if (cbd_opt == null) {
                                    cbd_opt = new ArrayList<>();
                                }
                                RESULT = cbd_opt;
                                RESULT.add (cb); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration_opt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBodyDeclaration_opt ::= 
            {
              List<Declaration> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration_opt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBodyDeclaration ::= ClassMemberDeclaration 
            {
              Declaration RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration cmd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cmd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassMemberDeclaration ::= FieldDeclaration 
            {
              Declaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDeclaration fd = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = fd;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassMemberDeclaration ::= MethodDeclaration 
            {
              Declaration RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDeclaration md = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = md; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassMemberDeclaration ::= SEMICOLON 
            {
              Declaration RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FieldDeclaration ::= Modifier_opt UnannType VariableDeclaratorList SEMICOLON 
            {
              FieldDeclaration RESULT =null;
		int mm_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mm_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> mm_opt = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type ut = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempWrapper vdl = (TempWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new FieldDeclaration(mm_opt, ut, vdl.variabledeclaratorid, vdl.variableinitializer);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclaration ::= Modifier_opt MethodHeader MethodBody 
            {
              MethodDeclaration RESULT =null;
		int mmOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mmOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> mmOpt = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempWrapper mh = (TempWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new MethodDeclaration(mmOpt, mh.result, mh.identifiernode, mh.parameters, mb);
                                
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Modifier_opt ::= Modifier_opt Modifier 
            {
              List<String> RESULT =null;
		int mmOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mmOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> mmOpt = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                if (mmOpt == null) {
                                    mmOpt = new ArrayList<>();
                                }
                                RESULT = mmOpt;
                                RESULT.add(mm);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier_opt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Modifier_opt ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier_opt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Modifier ::= PUBLIC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Modifier ::= PROTECTED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Modifier ::= PRIVATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Modifier ::= ABSTRACT 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Modifier ::= STATIC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Modifier ::= FINAL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Modifier ::= STRICTFP 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodHeader ::= Result MethodDeclarator Throws_opt 
            {
              TempWrapper RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempWrapper md = (TempWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new TempWrapper();
                                RESULT.result = new Result(i);
                                RESULT.identifiernode = md.identifiernode; /* TODO expand in the future */
                                RESULT.parameters = md.parameters;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodHeader",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Throws_opt ::= Throws 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Throws_opt",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Throws_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Throws_opt",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Result ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NamedType(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Result",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodDeclarator ::= Identifier LPAREN FormalParameterList_opt RPAREN 
            {
              TempWrapper RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpl_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpl_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Parameter> fpl_opt = (List<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new TempWrapper();                                
                                RESULT.identifiernode = id;
                                RESULT.parameters = fpl_opt;
                                
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParameterList_opt ::= FormalParameterList 
            {
              List<Parameter> RESULT =null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Parameter> fpl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = fpl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList_opt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormalParameterList_opt ::= 
            {
              List<Parameter> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList_opt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormalParameterList ::= LastFormalParameter 
            {
              List<Parameter> RESULT =null;
		int lfpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter lfp = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<>();
                                RESULT.add (lfp);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LastFormalParameter ::= FormalParameter 
            {
              Parameter RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter fp = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = fp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LastFormalParameter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormalParameter ::= Modifier_opt UnannType VariableDeclaratorId 
            {
              Parameter RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type ut = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierNode vdi = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new Parameter (ut, vdi);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UnannReferenceType ::= UnannArrayType 
            {
              Type RESULT =null;
		int uatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElementType uat = (ElementType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new ArrayType(uat);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannReferenceType",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UnannArrayType ::= UnannClassOrInterfaceType Dims 
            {
              ElementType RESULT =null;
		int ucoitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ucoitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElementType ucoit = (ElementType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = ucoit;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannArrayType",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Dims ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dims",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // UnannClassOrInterfaceType ::= UnannClassType 
            {
              ElementType RESULT =null;
		int uctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElementType uct = (ElementType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = uct;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannClassOrInterfaceType",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // UnannClassType ::= Identifier TypeArguments_opt 
            {
              ElementType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = new ElementType(id);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannClassType",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TypeArguments_opt ::= TypeArguments 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeArguments_opt",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TypeArguments_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeArguments_opt",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= AssignmentExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ae;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AssignmentExpression ::= ConditionalExpression 
            {
              Expression RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ce = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ce;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AssignmentExpression ::= Assignment 
            {
              Expression RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignmentExpression ass = (AssignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = ass;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Assignment ::= LeftHandSide AssignmentOperator Expression 
            {
              AssignmentExpression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentifierExpression lhs = (IdentifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignmentOperator ao = (AssignmentOperator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new AssignmentExpression(lhs, ao, e);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LeftHandSide ::= ExpressionName 
            {
              IdentifierExpression RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierExpression en = (IdentifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = en;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeftHandSide",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AssignmentOperator ::= OP_EQ 
            {
              AssignmentOperator RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new AssignmentOperator(eq);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AssignmentOperator ::= OP_MULTIPLY_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AssignmentOperator ::= OP_DIVIDE_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignmentOperator ::= OP_MODULUS_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AssignmentOperator ::= OP_ADD_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AssignmentOperator ::= OP_MINUS_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AssignmentOperator ::= OP_L_SHIFT_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AssignmentOperator ::= OP_R_SHIFT_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AssignmentOperator ::= OP_UNSIGN_R_SHIFT_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AssignmentOperator ::= OP_BIT_AND 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AssignmentOperator ::= OP_BIT_EXCL_OR 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AssignmentOperator ::= OP_BIT_INCL_OR 
            {
              AssignmentOperator RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ConditionalExpression ::= ConditionalOrExpression 
            {
              Expression RESULT =null;
		int coeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression coe = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = coe;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ConditionalExpression ::= ConditionalOrExpression OP_TERNARY Expression OP_LOOP_IN ConditionalExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ConditionalOrExpression ::= ConditionalAndExpression 
            {
              Expression RESULT =null;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression cae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = cae;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ConditionalAndExpression ::= InclusiveOrExpression 
            {
              Expression RESULT =null;
		int ioeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ioe = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ioe;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // InclusiveOrExpression ::= ExclusiveOrExpression 
            {
              Expression RESULT =null;
		int eoeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression eoe = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = eoe;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InclusiveOrExpression",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExclusiveOrExpression ::= AndExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ae;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExclusiveOrExpression ::= ExclusiveOrExpression OP_XOR AndExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AndExpression ::= EqualityExpression 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ee;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AndExpression ::= AndExpression OP_LOGIC_AND EqualityExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ola = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(ae,ee,new BinaryOperator(ola));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EqualityExpression ::= RelationalExpression 
            {
              Expression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = re;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EqualityExpression ::= EqualityExpression OP_EQ_EQ RelationalExpression 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(ee,re, new BinaryOperator(oee));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EqualityExpression ::= EqualityExpression OP_NOT_EQ RelationalExpression 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int noteqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noteqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String noteq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(ee,re,new BinaryOperator(noteq));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelationalExpression ::= ShiftExpression 
            {
              Expression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = se;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RelationalExpression ::= RelationalExpression OP_LT ShiftExpression 
            {
              Expression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(re,se,new BinaryOperator(ol));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelationalExpression ::= RelationalExpression OP_GT ShiftExpression 
            {
              Expression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String og = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new BinaryExpression(re,se,new BinaryOperator(og));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelationalExpression ::= RelationalExpression OP_GT_EQ ShiftExpression 
            {
              Expression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ogeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ogeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oge = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new BinaryExpression(re,se,new BinaryOperator(oge));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RelationalExpression ::= RelationalExpression OP_LT_EQ ShiftExpression 
            {
              Expression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ole = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new BinaryExpression(re,se,new BinaryOperator(ole));
                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ShiftExpression ::= AdditiveExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ae;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShiftExpression",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ShiftExpression ::= ShiftExpression OP_BIT_L_SHIFT AdditiveExpression 
            {
              Expression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oblsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oblsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String obls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(se,ae, new BinaryOperator(obls));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShiftExpression",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ShiftExpression ::= ShiftExpression OP_BIT_R_SHIFT AdditiveExpression 
            {
              Expression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression se = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int obrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int obrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String obrs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(se,ae,new BinaryOperator(obrs));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShiftExpression",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ShiftExpression ::= ShiftExpression OP_UNSIGN_R_SHIFT AdditiveExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShiftExpression",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AdditiveExpression ::= MultiplicativeExpression 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = me;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AdditiveExpression ::= AdditiveExpression OP_PLUS MultiplicativeExpression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							    RESULT = new BinaryExpression(lhs, rhs, new BinaryOperator (op));
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AdditiveExpression ::= AdditiveExpression OP_MINUS MultiplicativeExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MultiplicativeExpression ::= UnaryExpression 
            {
              Expression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = ue;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MultiplicativeExpression ::= MultiplicativeExpression OP_MULTIPLY UnaryExpression 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(me,ue, new BinaryOperator(om));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MultiplicativeExpression ::= MultiplicativeExpression OP_DIVIDE UnaryExpression 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String od = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(me,ue,new BinaryOperator(od));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MultiplicativeExpression ::= MultiplicativeExpression OP_MODULUS UnaryExpression 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	RESULT = new BinaryExpression(me,ue,new BinaryOperator(om));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // UnaryExpression ::= PreIncrementExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // UnaryExpression ::= PreDecrementExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // UnaryExpression ::= OP_PLUS UnaryExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // UnaryExpression ::= OP_MINUS UnaryExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // UnaryExpression ::= UnaryExpressionNotPlusMinus 
            {
              Expression RESULT =null;
		int unpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression unp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = unp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // UnaryExpressionNotPlusMinus ::= PostfixExpression 
            {
              Expression RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = pe;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // UnaryExpressionNotPlusMinus ::= OP_UNARY UnaryExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // UnaryExpressionNotPlusMinus ::= OP_NOT_EQ UnaryExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // UnaryExpressionNotPlusMinus ::= CastExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PostfixExpression ::= Primary 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = p;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PostfixExpression ::= ExpressionName 
            {
              Expression RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierExpression en = (IdentifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = en;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PostfixExpression ::= PostIncrementExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PostfixExpression ::= PostDecrementExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Primary ::= PrimaryNoNewArray 
            {
              Expression RESULT =null;
		int pnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntegerLiteralExpression pna = (IntegerLiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = pna;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Primary",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Primary ::= ArrayCreationExpression 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Primary",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpressionName ::= Identifier 
            {
              IdentifierExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new IdentifierExpression(id);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionName",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpressionName ::= Name DOT Identifier 
            {
              IdentifierExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionName",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PrimaryNoNewArray ::= Literal 
            {
              IntegerLiteralExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new IntegerLiteralExpression(l);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryNoNewArray",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Literal ::= INTEGER_LITERAL 
            {
              Integer RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Integer(il);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MethodBody ::= Block 
            {
              MethodBody RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> b = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new MethodBody(b);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodBody",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Block ::= LBRACE BlockStatements RBRACE 
            {
              List<Statement> RESULT =null;
		int bssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> bss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = bss;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BlockStatements ::= BlockStatement BlockStatement_opt 
            {
              List<Statement> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement bs = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bs_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bs_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> bs_opt = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<>();//zyx: 
                                RESULT.add(bs);
                                if (bs_opt != null) {
                                	RESULT.addAll(bs_opt);
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStatements",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BlockStatement_opt ::= BlockStatement_opt BlockStatement 
            {
              List<Statement> RESULT =null;
		int bs_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bs_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> bs_opt = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement bs = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            	if (bs_opt == null) {
                            		bs_opt = new ArrayList<>();
                            	}
                            	RESULT = bs_opt;
                                RESULT.add(bs);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStatement_opt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BlockStatement_opt ::= 
            {
              List<Statement> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStatement_opt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BlockStatement ::= LocalVariableDeclarationStatement 
            {
              Statement RESULT =null;
		int lvdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVariableDeclarationStatement lvds = (LocalVariableDeclarationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = lvds;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BlockStatement ::= Statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = s;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Statement ::= StatementWithoutTrailingSubstatement 
            {
              Statement RESULT =null;
		int swtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement swts = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = swts;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Statement ::= IfThenStatement 
            {
              Statement RESULT =null;
		int itsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement its = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = its;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Statement ::= ElseIfStatement 
            {
              Statement RESULT =null;
		int eitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement eits = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = eits;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Statement ::= ElseStatement 
            {
              Statement RESULT =null;
		int etsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ets = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = ets;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IfThenStatement ::= IF LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//                                 RESULT = new IfThenStatement(e,s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfThenStatement",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ElseIfStatement ::= ELSE IF LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//                                 RESULT = new ElseIfStatement(e,s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ElseStatement ::= ELSE Statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//                                 RESULT = new ElseStatement(s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // StatementWithoutTrailingSubstatement ::= Block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> b = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//                                          RESULT = new StatementWithoutTrailingSubstatement(b);
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // StatementWithoutTrailingSubstatement ::= ExpressionStatement 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement es = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          RESULT = es;
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ExpressionStatement ::= StatementExpression SEMICOLON 
            {
              Statement RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement se = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = se;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // StatementExpression ::= Assignment 
            {
              Statement RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignmentExpression ass = (AssignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new ExpressionStatement(ass);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // StatementExpression ::= MethodInvocation 
            {
              Statement RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodInvocationStatement mi = (MethodInvocationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = mi;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON 
            {
              LocalVariableDeclarationStatement RESULT =null;
		int lvdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LocalVariableDeclarationStatement lvd = (LocalVariableDeclarationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                       RESULT = lvd;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LocalVariableDeclaration ::= Modifier_opt UnannType VariableDeclaratorList 
            {
              LocalVariableDeclarationStatement RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type ut = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempWrapper vdl = (TempWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new LocalVariableDeclarationStatement(ut, vdl.variabledeclaratorid, vdl.variableinitializer);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclaration",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VariableDeclaratorList ::= VariableDeclarator VariableDeclarator_opt 
            {
              TempWrapper RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempWrapper vd = (TempWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = vd;   
                                 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VariableDeclarator_opt ::= COMMA VariableDeclarator_opt VariableDeclarator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarator_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VariableDeclarator_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarator_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VariableDeclarator ::= VariableDeclaratorId VariableInitializer_opt 
            {
              TempWrapper RESULT =null;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierNode vdi = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vi_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vi_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableInitializer vi_opt = (VariableInitializer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new TempWrapper();
                                 RESULT.variabledeclaratorid = vdi;
                                 RESULT.variableinitializer = vi_opt;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VariableInitializer_opt ::= OP_EQ VariableInitializer 
            {
              VariableInitializer RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableInitializer vi = (VariableInitializer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = vi;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableInitializer_opt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // VariableInitializer_opt ::= 
            {
              VariableInitializer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableInitializer_opt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VariableDeclaratorId ::= Identifier Dims_opt 
            {
              IdentifierNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                 RESULT = id;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorId",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Dims_opt ::= Dims 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dims_opt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Dims_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dims_opt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VariableInitializer ::= Expression 
            {
              VariableInitializer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new VariableInitializer(e);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableInitializer",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // UnannType ::= UnannPrimitiveType 
            {
              Type RESULT =null;
		int uptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type upt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = upt;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannType",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // UnannType ::= UnannReferenceType 
            {
              Type RESULT =null;
		int urtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int urtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type urt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = urt;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannType",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // UnannPrimitiveType ::= NumericType 
            {
              Type RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type nt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = nt;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnannPrimitiveType",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NumericType ::= IntegralType 
            {
              Type RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type it = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = it;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumericType",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NumericType ::= FloatingPointType 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumericType",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // IntegralType ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = new NamedType(i);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegralType",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // IntegralType ::= CHAR 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegralType",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // IntegralType ::= BYTE 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegralType",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // IntegralType ::= SHORT 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegralType",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IntegralType ::= LONG 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegralType",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FloatingPointType ::= DOUBLE 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FloatingPointType",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FloatingPointType ::= FLOAT 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FloatingPointType",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MethodInvocation ::= Name DOT Identifier LPAREN ArgumentList_opt RPAREN 
            {
              MethodInvocationStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<String> n = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdentifierNode m = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aloptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aloptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> alopt = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new MethodInvocationStatement(n,m,alopt);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Name ::= Identifier 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<>();
                                RESULT.add (i.value);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Name ::= Name DOT Identifier 
            {
              List<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> n = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                if (n == null) {
                                    n = new ArrayList<>();
                                }
                                RESULT = n;
                                RESULT.add (i.value);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ArgumentList_opt ::= ArgumentList 
            {
              List<Expression> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> a = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = a;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList_opt",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ArgumentList_opt ::= 
            {
              List<Expression> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList_opt",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ArgumentList ::= Expression ExpressionComma_opt 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> ec = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<>();
                                RESULT.add(e);
                                if (ec != null) {
                                    RESULT.addAll(ec);
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ExpressionComma_opt ::= ExpressionComma_opt COMMA Expression 
            {
              List<Expression> RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> ec = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                if (ec == null) {
                                    ec = new ArrayList<>();
                                }
                                RESULT = ec;
                                RESULT.add (e);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionComma_opt",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ExpressionComma_opt ::= 
            {
              List<Expression> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionComma_opt",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
